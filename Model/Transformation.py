# -*- coding: utf-8 -*-

import numpy as np


class Transformation:
    """
    Класс Transformation предоставляет методы
    генерации матриц для афинного преобразования
    """
    # ==========================================================
    # матрица поворота вокруг оси x
    # ==========================================================
    @classmethod
    def getRotateXMatrix(self, theta):
        Rx = np.matrix([[1,  0,              0,             0],
                        [0,  np.cos(theta),  np.sin(theta), 0],
                        [0,  -np.sin(theta), np.cos(theta), 0],
                        [0,  0,              0,             1]])
        return Rx

    # ==========================================================
    # матрица поворота вокруг оси y
    # ==========================================================
    @classmethod
    def getRotateYMatrix(self, phi):
        Ry = np.matrix([[np.cos(phi), 0, -np.sin(phi), 0],
                        [0,           1, 0,            0],
                        [np.sin(phi), 0, np.cos(phi),  0],
                        [0,           0, 0,            1]])
        return Ry

    # ==========================================================
    # матрица поворота вокруг оси z
    # ==========================================================
    @classmethod
    def getRotateZMatrix(self, psi):
        Rz = np.matrix([[np.cos(psi),  np.sin(psi), 0, 0],
                        [-np.sin(psi), np.cos(psi), 0, 0],
                        [0,            0,           1, 0],
                        [0,            0,           0, 1]])
        return Rz

    # ==========================================================
    # матрица пространственного переноса
    # ==========================================================
    @classmethod
    def getTransferMatrix(self, dx=0, dy=0, dz=0):
        T = np.matrix([[1,  0,  0,  0],
                       [0,  1,  0,  0],
                       [0,  0,  1,  0],
                       [dx, dy, dz, 1]])
        return T

    # ==========================================================
    # матрица локального масштабирования
    # ==========================================================
    @classmethod
    def getScaleMatrix(self, kx=1, ky=1, kz=1):
        T = np.matrix([[kx, 0,  0,  0],
                       [0,  ky, 0,  0],
                       [0,  0,  kz, 0],
                       [0,  0,  0,  1]])
        return T

    # ==========================================================
    # матрица трехмерного отражения относительно плоскости xy
    # ==========================================================
    @classmethod
    def getMirrorXYMatrix(self):
        T = self.getScaleMatrix(kz=-1)
        return T

    # ==========================================================
    # матрица трехмерного отражения относительно плоскости yz
    # ==========================================================
    @classmethod
    def getMirrorYZMatrix(self):
        T = self.getScaleMatrix(kx=-1)
        return T

    # ==========================================================
    # матрица трехмерного отражения относительно плоскости xz
    # ==========================================================
    @classmethod
    def getMirrorXZMatrix(self):
        T = self.getScaleMatrix(ky=-1)
        return T
